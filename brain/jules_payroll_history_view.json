{
  "component_specification": {
    "component_name": "PayrollHistory",
    "file_path": "src/views/Admin/PayrollHistory.vue",
    "purpose": "Historical payroll periods query and management interface for completed periods",
    "estimated_complexity": "Medium",
    "estimated_time": "90-120 minutes",

    "dependencies": {
      "composables": ["usePayrollHistory (from Qwen - WAIT FOR COMPLETION)"],
      "components": ["v-data-table", "v-dialog", "v-date-picker", "v-select", "v-btn", "v-card"],
      "libraries": ["Vue 3 Composition API", "Vuetify 3", "Pinia (optional for hotel list)"]
    },

    "layout_structure": {
      "type": "Full-page admin view with sidebar navigation",
      "sections": [
        "Page header with title and filters",
        "v-data-table with historical payroll records",
        "Filter panel (hotel, date range, status)",
        "Detail modal for payroll items breakdown",
        "Export button for Excel generation"
      ]
    },

    "data_model": {
      "main_collection": "payroll",
      "expand_pattern": "hotel,approved_by",
      "fields": "id,hotel,week_start,week_end,total_hours,total_amount,status,quickbooks_batch_id,generated_at",
      "filter_logic": "status IN ('approved', 'sent_to_quickbooks', 'paid')",
      "sort_order": "-week_start (descending)"
    },

    "ui_components": {
      "filters": {
        "hotel_select": {
          "type": "v-select",
          "label": "Filter by Hotel",
          "items": "hotels collection",
          "item_value": "id",
          "item_title": "name",
          "clearable": true,
          "multiple": false
        },
        "date_range": {
          "type": "v-date-picker (range mode)",
          "label": "Week Start Date Range",
          "model": "{startDate, endDate}",
          "format": "YYYY-MM-DD"
        },
        "status_select": {
          "type": "v-select",
          "label": "Status",
          "items": ["approved", "sent_to_quickbooks", "paid"],
          "multiple": true,
          "default": ["approved", "sent_to_quickbooks", "paid"]
        }
      },

      "data_table": {
        "headers": [
          {"title": "Hotel", "key": "expand.hotel.name", "sortable": true},
          {"title": "Week Start", "key": "week_start", "sortable": true},
          {"title": "Week End", "key": "week_end", "sortable": true},
          {"title": "Total Hours", "key": "total_hours", "align": "end"},
          {"title": "Total Amount", "key": "total_amount", "align": "end", "format": "currency"},
          {"title": "Status", "key": "status", "sortable": true},
          {"title": "QB Batch ID", "key": "quickbooks_batch_id"},
          {"title": "Actions", "key": "actions", "sortable": false}
        ],
        "features": {
          "pagination": true,
          "items_per_page": 50,
          "loading": "bind to loading state from composable",
          "search": false,
          "sort_by": [{"key": "week_start", "order": "desc"}]
        }
      },

      "detail_modal": {
        "trigger": "Click on Actions > View Details button",
        "content": "Show payroll_items for selected payroll record",
        "query": "collection('payroll_items').getList({ filter: `payroll='${payrollId}'`, expand: 'assignment.employee,assignment.position' })",
        "display": [
          "Employee name (from expand.assignment.employee)",
          "Position (from expand.assignment.position.title)",
          "Hours worked",
          "Hourly rate",
          "Gross pay"
        ]
      }
    },

    "business_logic": {
      "filter_application": "On filter change, call fetchPayrollHistory() with new filter params",
      "export_excel": "Call composable.exportPayrollToExcel(payrollId) - Qwen will implement",
      "date_formatting": "Use Intl.DateTimeFormat for locale-aware dates",
      "currency_formatting": "Use Intl.NumberFormat('en-US', {style: 'currency', currency: 'USD'})"
    },

    "pattern_reference": {
      "similar_component": "src/views/Admin/Reconciliation.vue",
      "follow_patterns": [
        "Page layout with sidebar navigation",
        "Filter panel structure",
        "v-data-table configuration",
        "Loading state management",
        "Error handling with v-alert"
      ]
    },

    "code_template": {
      "script_setup": "Use <script setup> syntax",
      "imports": [
        "import { ref, onMounted, computed } from 'vue'",
        "import { usePayrollHistory } from '@/composables/usePayrollHistory'",
        "import { pb } from '@/plugins/pocketbase'"
      ],
      "state_management": [
        "const { payrollHistory, loading, error, fetchPayrollHistory } = usePayrollHistory()",
        "const selectedHotel = ref(null)",
        "const dateRange = ref({ startDate: null, endDate: null })",
        "const selectedStatus = ref(['approved', 'sent_to_quickbooks', 'paid'])",
        "const detailDialog = ref(false)",
        "const selectedPayroll = ref(null)"
      ],
      "lifecycle_hooks": [
        "onMounted(() => { fetchPayrollHistory() })"
      ]
    },

    "validation_rules": {
      "date_range": "End date must be >= start date",
      "hotel_filter": "Optional, no validation needed",
      "status_filter": "At least one status must be selected"
    },

    "accessibility": {
      "labels": "All form inputs have proper labels",
      "aria": "Use Vuetify default ARIA labels",
      "keyboard_navigation": "Vuetify components handle this automatically"
    },

    "performance": {
      "pagination": "Server-side pagination via Pocketbase perPage parameter",
      "lazy_loading": "Only fetch when filters change",
      "virtual_scrolling": "NOT needed (max 50-100 records per query)"
    },

    "testing_checklist": [
      "Test with no filters (should show all approved+ payrolls)",
      "Test hotel filter (should only show payrolls for selected hotel)",
      "Test date range filter (should respect start/end dates)",
      "Test detail modal (should show payroll_items breakdown)",
      "Test empty state (no results found)",
      "Test loading state (spinner while fetching)",
      "Test error handling (show error alert if API fails)"
    ],

    "success_criteria": {
      "functional": "Can filter and view historical payroll records",
      "visual": "Matches Vuetify Material Design standards",
      "performance": "Loads in < 3 seconds with 50 records",
      "responsive": "Works on desktop and tablet (mobile optional)"
    },

    "blocked_by": "Qwen must complete usePayrollHistory.js first",
    "blocks": "None (standalone view)",

    "notes": [
      "This is READ-ONLY view - no editing or deletion",
      "Excel export is stretch goal - implement if time permits",
      "Focus on filters and data display first",
      "Use existing ReconciliationModal.vue as reference for modal pattern"
    ]
  }
}