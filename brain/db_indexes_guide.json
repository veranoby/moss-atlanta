{
  "database_indexes_guide": {
    "purpose": "Performance optimization indexes for Pocketbase collections at scale (400+ employees, 1M+ punches/month)",
    "priority": "HIGH - Implement before production deployment",
    "impact": "Query performance improvement: 10-100x faster for filtered/sorted queries",

    "performance_risks_without_indexes": {
      "punches_collection": {
        "risk": "CRITICAL",
        "volume": "1M+ records per month",
        "queries_affected": [
          "Filter by employee (employee timesheet queries)",
          "Filter by date range (reconciliation queries)",
          "Sort by timestamp (chronological display)"
        ],
        "performance_degradation": "Linear scan of millions of records = 10-30 second queries"
      },
      "payroll_collection": {
        "risk": "MEDIUM",
        "volume": "50-100 records per week (2600-5200 per year)",
        "queries_affected": [
          "Filter by hotel (hotel billing queries)",
          "Filter by week_start date (historical queries)",
          "Filter by status (completed payrolls only)"
        ],
        "performance_degradation": "Acceptable without indexes initially, but recommended for future scale"
      },
      "reconciliations_collection": {
        "risk": "MEDIUM",
        "volume": "400 employees × 7 days × 52 weeks = 145,600 records per year",
        "queries_affected": [
          "Filter by hotel_report (reconciliation dashboard)",
          "Filter by status (archive search)",
          "Filter by date (audit queries)"
        ],
        "performance_degradation": "Slow archive search, audit queries"
      }
    },

    "recommended_indexes": {
      "punches": {
        "priority": "P0 - CRITICAL",
        "reason": "Highest volume collection, most frequently queried",
        "indexes": [
          {
            "name": "idx_punches_assignment_timestamp",
            "fields": ["assignment", "timestamp"],
            "use_case": "Employee timesheet queries (fetch all punches for employee in date range)",
            "query_example": "filter: assignment.employee='{id}' && timestamp>='{start}' && timestamp<='{end}'",
            "performance_gain": "100x faster (O(log n) vs O(n))"
          },
          {
            "name": "idx_punches_timestamp",
            "fields": ["timestamp"],
            "use_case": "Chronological sorting and date range filters",
            "query_example": "sort: +timestamp, filter: timestamp>='{date}'",
            "performance_gain": "50x faster for date-based queries"
          },
          {
            "name": "idx_punches_type",
            "fields": ["type"],
            "use_case": "Filter by punch type (clock_in, break_start, etc.)",
            "query_example": "filter: type='clock_in'",
            "performance_gain": "20x faster for type-specific queries"
          }
        ],
        "compound_index_consideration": {
          "best_option": "idx_punches_assignment_timestamp",
          "covers_queries": "95% of employee timesheet and reconciliation queries",
          "storage_cost": "Minimal (2 fields, selective)"
        }
      },

      "payroll": {
        "priority": "P1 - HIGH",
        "reason": "Historical queries and hotel billing reports",
        "indexes": [
          {
            "name": "idx_payroll_hotel_week_start",
            "fields": ["hotel", "week_start"],
            "use_case": "Hotel billing queries (all payroll for hotel in date range)",
            "query_example": "filter: hotel='{id}' && week_start>='{start}' && week_start<='{end}'",
            "performance_gain": "50x faster for hotel-specific queries"
          },
          {
            "name": "idx_payroll_status_week_start",
            "fields": ["status", "week_start"],
            "use_case": "Historical payroll queries (completed periods only, sorted by date)",
            "query_example": "filter: status='approved' || status='paid', sort: -week_start",
            "performance_gain": "30x faster for payroll history views"
          }
        ]
      },

      "reconciliations": {
        "priority": "P1 - HIGH",
        "reason": "Reconciliation archive search and audit queries",
        "indexes": [
          {
            "name": "idx_reconciliations_hotel_report_status",
            "fields": ["hotel_report", "status"],
            "use_case": "Reconciliation dashboard (pending/resolved per period)",
            "query_example": "filter: hotel_report='{id}' && status='discrepancy'",
            "performance_gain": "40x faster for dashboard queries"
          },
          {
            "name": "idx_reconciliations_date_status",
            "fields": ["date", "status"],
            "use_case": "Archive search by date range and status",
            "query_example": "filter: date>='{start}' && date<='{end}' && status='resolved'",
            "performance_gain": "30x faster for audit queries"
          }
        ]
      },

      "employee_assignments": {
        "priority": "P2 - MEDIUM",
        "reason": "Employee queries and active assignment filters",
        "indexes": [
          {
            "name": "idx_assignments_employee_is_active",
            "fields": ["employee", "is_active"],
            "use_case": "Get active assignments for employee",
            "query_example": "filter: employee='{id}' && is_active=true",
            "performance_gain": "20x faster for employee profile queries"
          },
          {
            "name": "idx_assignments_hotel_is_active",
            "fields": ["hotel", "is_active"],
            "use_case": "Get active employees for hotel",
            "query_example": "filter: hotel='{id}' && is_active=true",
            "performance_gain": "20x faster for hotel roster queries"
          }
        ]
      },

      "audit_logs": {
        "priority": "P2 - MEDIUM",
        "reason": "Audit trail queries and compliance reports",
        "indexes": [
          {
            "name": "idx_audit_logs_timestamp_user",
            "fields": ["timestamp", "user"],
            "use_case": "User activity reports and time-based audit queries",
            "query_example": "filter: timestamp>='{start}' && user='{id}'",
            "performance_gain": "30x faster for audit reports"
          },
          {
            "name": "idx_audit_logs_collection_name_action",
            "fields": ["collection_name", "action"],
            "use_case": "Collection-specific audit queries (e.g., all deletes on employees)",
            "query_example": "filter: collection_name='employees' && action='delete'",
            "performance_gain": "25x faster for collection-specific audits"
          }
        ]
      }
    },

    "implementation_instructions": {
      "pocketbase_ui_method": {
        "access": "Pocketbase Admin UI → Collections → [collection_name] → Settings → Indexes",
        "steps": [
          "1. Open Pocketbase admin at http://localhost:8080/_/",
          "2. Navigate to Collections",
          "3. Click on collection name (e.g., 'punches')",
          "4. Click 'Settings' tab",
          "5. Scroll to 'Indexes' section",
          "6. Click 'New index'",
          "7. Select fields in order (e.g., 'assignment', then 'timestamp')",
          "8. Enable 'Unique' only if index enforces uniqueness (usually false)",
          "9. Click 'Save'",
          "10. Repeat for each index"
        ]
      },
      "programmatic_method": {
        "note": "Not recommended for production - use UI for safety",
        "approach": "Would require Pocketbase migrations or direct SQLite manipulation"
      }
    },

    "index_creation_priority_order": {
      "step_1": {
        "collection": "punches",
        "indexes": ["idx_punches_assignment_timestamp"],
        "reason": "Highest impact, most critical performance improvement",
        "estimated_time": "2 minutes"
      },
      "step_2": {
        "collection": "payroll",
        "indexes": ["idx_payroll_hotel_week_start", "idx_payroll_status_week_start"],
        "reason": "Historical views will be slow without these",
        "estimated_time": "3 minutes"
      },
      "step_3": {
        "collection": "reconciliations",
        "indexes": ["idx_reconciliations_hotel_report_status", "idx_reconciliations_date_status"],
        "reason": "Reconciliation dashboard and archive performance",
        "estimated_time": "3 minutes"
      },
      "step_4": {
        "collection": "employee_assignments",
        "indexes": ["idx_assignments_employee_is_active", "idx_assignments_hotel_is_active"],
        "reason": "Employee profile and hotel roster queries",
        "estimated_time": "3 minutes"
      },
      "step_5": {
        "collection": "audit_logs",
        "indexes": ["idx_audit_logs_timestamp_user"],
        "reason": "Audit trail queries for compliance",
        "estimated_time": "2 minutes"
      },
      "total_time": "15 minutes to implement all critical indexes"
    },

    "validation_after_creation": {
      "test_queries": {
        "punches": {
          "query": "pb.collection('punches').getList(1, 50, { filter: \"assignment.employee='test_id' && timestamp>='2025-01-01'\", sort: '+timestamp' })",
          "expected": "Query completes in < 100ms (was 5-10 seconds without index)"
        },
        "payroll": {
          "query": "pb.collection('payroll').getList(1, 50, { filter: \"hotel='test_id' && week_start>='2025-01-01'\", sort: '-week_start' })",
          "expected": "Query completes in < 50ms"
        }
      },
      "monitoring": {
        "tool": "Pocketbase logs or browser Network tab",
        "metric": "Query response time",
        "success_threshold": "< 200ms for all indexed queries"
      }
    },

    "storage_cost_analysis": {
      "punches_idx_assignment_timestamp": {
        "estimated_size": "~50MB for 1M records",
        "benefit": "100x query speedup",
        "cost_benefit": "Excellent - essential index"
      },
      "total_index_overhead": {
        "estimated_storage": "< 200MB additional",
        "server_specs": "Hetzner CX11 has 20GB SSD",
        "impact": "< 1% of available storage",
        "conclusion": "Negligible storage cost for massive performance gain"
      }
    },

    "maintenance_notes": {
      "auto_maintained": true,
      "rebuild_needed": false,
      "pocketbase_handles": "Index updates automatically on INSERT/UPDATE/DELETE",
      "monitoring": "No special maintenance required, indexes are self-maintaining"
    },

    "advanced_considerations": {
      "composite_index_order": {
        "rule": "Most selective field first (e.g., assignment before timestamp in punches)",
        "reason": "Pocketbase uses leftmost prefix matching",
        "example": "idx(assignment, timestamp) can be used for queries on 'assignment' alone, but idx(timestamp, assignment) cannot"
      },
      "index_vs_full_scan_threshold": {
        "pocketbase_optimizer": "Automatically chooses index vs full scan based on data distribution",
        "trust_optimizer": "No manual hints needed"
      },
      "future_scaling": {
        "when_to_add_more": "If queries on other fields become slow (monitor in production)",
        "cost_threshold": "Add index if query > 500ms consistently"
      }
    }
  }
}